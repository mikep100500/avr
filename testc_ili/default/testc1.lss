
testc1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000080c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800100  00800100  00000880  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000880  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000187  00000000  00000000  00000ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d2  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000026a  00000000  00000000  00001a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa8  00000000  00000000  00001cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  0000275c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000235  00000000  00000000  0000288c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000478  00000000  00000000  00002ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00002f39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ce 03 	call	0x79c	; 0x79c <main>
  88:	0c 94 04 04 	jmp	0x808	; 0x808 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <port_ini>:

void port_ini(void)

{

DATA_PORT=0x00;
  90:	1b b8       	out	0x0b, r1	; 11
DATA2_PORT=0x00;
  92:	15 b8       	out	0x05, r1	; 5

DATA_DDR=0xFF;//Шина данных на выход
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	8a b9       	out	0x0a, r24	; 10
DATA2_DDR=0xFF;
  98:	84 b9       	out	0x04, r24	; 4

COMMAND_DDR=0x1F;//Командные лапки также все на выход
  9a:	8f e1       	ldi	r24, 0x1F	; 31
  9c:	87 b9       	out	0x07, r24	; 7

} 
  9e:	08 95       	ret

000000a0 <uart_init>:

void uart_init(void)
{


UBRR0L=(uint8_t)(MYUBRR%256);
  a0:	87 e6       	ldi	r24, 0x67	; 103
  a2:	80 93 c4 00 	sts	0x00C4, r24
UBRR0H=(uint8_t)(MYUBRR/256);
  a6:	10 92 c5 00 	sts	0x00C5, r1
UCSR0B=1<<TXEN0;
  aa:	88 e0       	ldi	r24, 0x08	; 8
  ac:	80 93 c1 00 	sts	0x00C1, r24
UCSR0C=0b11 << UCSZ00;
  b0:	86 e0       	ldi	r24, 0x06	; 6
  b2:	80 93 c2 00 	sts	0x00C2, r24
UCSR0A=0;
  b6:	10 92 c0 00 	sts	0x00C0, r1

}
  ba:	08 95       	ret

000000bc <uart_send>:

void uart_send(uint8_t byte)
{
	while(!(UCSR0A & (1<<UDRE0))) ;
  bc:	90 91 c0 00 	lds	r25, 0x00C0
  c0:	95 ff       	sbrs	r25, 5
  c2:	fc cf       	rjmp	.-8      	; 0xbc <uart_send>
	UDR0=byte;
  c4:	80 93 c6 00 	sts	0x00C6, r24
}
  c8:	08 95       	ret

000000ca <print_num>:

void print_num(uint8_t byte)
{
  ca:	1f 93       	push	r17
  cc:	18 2f       	mov	r17, r24
	if (byte>100) uart_send('0'+byte/100);
  ce:	85 36       	cpi	r24, 0x65	; 101
  d0:	30 f0       	brcs	.+12     	; 0xde <print_num+0x14>
  d2:	64 e6       	ldi	r22, 0x64	; 100
  d4:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__udivmodqi4>
  d8:	80 5d       	subi	r24, 0xD0	; 208
  da:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_send>
	if (byte%100>10) uart_send('0'+(byte%100)/10);
  de:	81 2f       	mov	r24, r17
  e0:	64 e6       	ldi	r22, 0x64	; 100
  e2:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__udivmodqi4>
  e6:	89 2f       	mov	r24, r25
  e8:	9b 30       	cpi	r25, 0x0B	; 11
  ea:	30 f0       	brcs	.+12     	; 0xf8 <print_num+0x2e>
  ec:	6a e0       	ldi	r22, 0x0A	; 10
  ee:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__udivmodqi4>
  f2:	80 5d       	subi	r24, 0xD0	; 208
  f4:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_send>
	uart_send('0'+byte%10);
  f8:	81 2f       	mov	r24, r17
  fa:	6a e0       	ldi	r22, 0x0A	; 10
  fc:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__udivmodqi4>
 100:	89 2f       	mov	r24, r25
 102:	80 5d       	subi	r24, 0xD0	; 208
 104:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_send>
}
 108:	1f 91       	pop	r17
 10a:	08 95       	ret

0000010c <TFT9341_SendByte>:

 

void TFT9341_SendByte(unsigned char byte)
{
  DATA_PORT=(DATA_PORT & 0b00000011) | (byte & 0b11111100);
 10c:	2b b1       	in	r18, 0x0b	; 11
 10e:	98 2f       	mov	r25, r24
 110:	9c 7f       	andi	r25, 0xFC	; 252
 112:	23 70       	andi	r18, 0x03	; 3
 114:	92 2b       	or	r25, r18
 116:	9b b9       	out	0x0b, r25	; 11
  DATA2_PORT=(DATA2_PORT & 0b11111100) |(byte & 0b00000011);
 118:	95 b1       	in	r25, 0x05	; 5
 11a:	83 70       	andi	r24, 0x03	; 3
 11c:	9c 7f       	andi	r25, 0xFC	; 252
 11e:	89 2b       	or	r24, r25
 120:	85 b9       	out	0x05, r24	; 5
}
 122:	08 95       	ret

00000124 <TFT9341_ReadByte>:

unsigned char TFT9341_ReadByte(void)
{
  return (DATA_PIN & 0b11111100) | (DATA2_PIN & 0b00000011);
 124:	89 b1       	in	r24, 0x09	; 9
 126:	93 b1       	in	r25, 0x03	; 3
 128:	93 70       	andi	r25, 0x03	; 3
 12a:	8c 7f       	andi	r24, 0xFC	; 252
}
 12c:	89 2b       	or	r24, r25
 12e:	08 95       	ret

00000130 <TFT9341_SendCommand>:

void TFT9341_SendCommand(unsigned char cmd)

{

  CD_COMMAND;//лапка в состоянии посылки команды
 130:	42 98       	cbi	0x08, 2	; 8

  RD_IDLE;//отключим чтение
 132:	40 9a       	sbi	0x08, 0	; 8

  CS_ACTIVE;//выбор дисплея
 134:	43 98       	cbi	0x08, 3	; 8

  TFT9341_SendByte(cmd);
 136:	0e 94 86 00 	call	0x10c	; 0x10c <TFT9341_SendByte>

  WR_STROBE;
 13a:	41 98       	cbi	0x08, 1	; 8
 13c:	41 9a       	sbi	0x08, 1	; 8

  CS_IDLE;
 13e:	43 9a       	sbi	0x08, 3	; 8

}
 140:	08 95       	ret

00000142 <TFT9341_SendData>:

void TFT9341_SendData(unsigned char dt)

{

  CD_DATA;//лапка в состоянии посылки данных
 142:	42 9a       	sbi	0x08, 2	; 8

  RD_IDLE;//отключим чтение
 144:	40 9a       	sbi	0x08, 0	; 8

  CS_ACTIVE;//выбор дисплея
 146:	43 98       	cbi	0x08, 3	; 8

  TFT9341_SendByte(dt);
 148:	0e 94 86 00 	call	0x10c	; 0x10c <TFT9341_SendByte>

  WR_STROBE;
 14c:	41 98       	cbi	0x08, 1	; 8
 14e:	41 9a       	sbi	0x08, 1	; 8

  CS_IDLE;
 150:	43 9a       	sbi	0x08, 3	; 8

}
 152:	08 95       	ret

00000154 <TFT9341_reset>:

void TFT9341_reset(void)

{

  CS_IDLE;
 154:	43 9a       	sbi	0x08, 3	; 8

  WR_IDLE;
 156:	41 9a       	sbi	0x08, 1	; 8

  RD_IDLE;
 158:	40 9a       	sbi	0x08, 0	; 8

  RESET_ACTIVE;
 15a:	44 98       	cbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	8f e3       	ldi	r24, 0x3F	; 63
 15e:	9f e1       	ldi	r25, 0x1F	; 31
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <TFT9341_reset+0xc>
 164:	00 c0       	rjmp	.+0      	; 0x166 <TFT9341_reset+0x12>
 166:	00 00       	nop

  _delay_ms(2);

  RESET_IDLE;
 168:	44 9a       	sbi	0x08, 4	; 8

  CS_ACTIVE;
 16a:	43 98       	cbi	0x08, 3	; 8

  TFT9341_SendCommand(0x01); //Software Reset
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 98 00 	call	0x130	; 0x130 <TFT9341_SendCommand>
 172:	83 e0       	ldi	r24, 0x03	; 3

  for (uint8_t i=0;i<3;i++) WR_STROBE;
 174:	41 98       	cbi	0x08, 1	; 8
 176:	41 9a       	sbi	0x08, 1	; 8
 178:	81 50       	subi	r24, 0x01	; 1
 17a:	e1 f7       	brne	.-8      	; 0x174 <TFT9341_reset+0x20>

  CS_IDLE;
 17c:	43 9a       	sbi	0x08, 3	; 8

}
 17e:	08 95       	ret

00000180 <TFT9341_Write8>:

void TFT9341_Write8(unsigned char dt)

{

  TFT9341_SendByte(dt);
 180:	0e 94 86 00 	call	0x10c	; 0x10c <TFT9341_SendByte>

  WR_STROBE;
 184:	41 98       	cbi	0x08, 1	; 8
 186:	41 9a       	sbi	0x08, 1	; 8

} 
 188:	08 95       	ret

0000018a <TFT9341_ReadReg>:

unsigned long TFT9341_ReadReg(unsigned char r)

{
 18a:	bf 92       	push	r11
 18c:	cf 92       	push	r12
 18e:	df 92       	push	r13
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	b8 2e       	mov	r11, r24

  unsigned long id;
  unsigned char x;


 CS_ACTIVE;//выбор дисплея
 19a:	43 98       	cbi	0x08, 3	; 8
 CD_COMMAND;//лапка в состоянии посылки команды
 19c:	42 98       	cbi	0x08, 2	; 8
 TFT9341_Write8(r); 
 19e:	0e 94 c0 00 	call	0x180	; 0x180 <TFT9341_Write8>
 setReadDir(); 
 1a2:	8a b1       	in	r24, 0x0a	; 10
 1a4:	83 70       	andi	r24, 0x03	; 3
 1a6:	8a b9       	out	0x0a, r24	; 10
 1a8:	84 b1       	in	r24, 0x04	; 4
 1aa:	8c 7f       	andi	r24, 0xFC	; 252
 1ac:	84 b9       	out	0x04, r24	; 4
 CD_DATA;
 1ae:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	87 ec       	ldi	r24, 0xC7	; 199
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <TFT9341_ReadReg+0x2a>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <TFT9341_ReadReg+0x30>
 1ba:	00 00       	nop
 _delay_us(50); 
 RD_ACTIVE;
 1bc:	40 98       	cbi	0x08, 0	; 8
 1be:	9a e1       	ldi	r25, 0x1A	; 26
 1c0:	9a 95       	dec	r25
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <TFT9341_ReadReg+0x36>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <TFT9341_ReadReg+0x3c>
 _delay_us(5); 
 x=TFT9341_ReadByte();
 1c6:	0e 94 92 00 	call	0x124	; 0x124 <TFT9341_ReadByte>
 1ca:	e8 2e       	mov	r14, r24
 print_num(x);
 1cc:	0e 94 65 00 	call	0xca	; 0xca <print_num>
 RD_IDLE;
 1d0:	40 9a       	sbi	0x08, 0	; 8
 id=x;
 1d2:	ff 24       	eor	r15, r15
 1d4:	00 e0       	ldi	r16, 0x00	; 0
 1d6:	10 e0       	ldi	r17, 0x00	; 0
 id<<=8; 
 1d8:	10 2f       	mov	r17, r16
 1da:	0f 2d       	mov	r16, r15
 1dc:	fe 2c       	mov	r15, r14
 1de:	ee 24       	eor	r14, r14

 RD_ACTIVE;
 1e0:	40 98       	cbi	0x08, 0	; 8
 1e2:	8a e1       	ldi	r24, 0x1A	; 26
 1e4:	8a 95       	dec	r24
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <TFT9341_ReadReg+0x5a>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <TFT9341_ReadReg+0x60>

_delay_us(5);

 x=TFT9341_ReadByte();
 1ea:	0e 94 92 00 	call	0x124	; 0x124 <TFT9341_ReadByte>
 1ee:	c8 2e       	mov	r12, r24
 print_num(x);
 1f0:	0e 94 65 00 	call	0xca	; 0xca <print_num>

RD_IDLE;
 1f4:	40 9a       	sbi	0x08, 0	; 8

id|=x;
 1f6:	8c 2d       	mov	r24, r12
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	a0 e0       	ldi	r26, 0x00	; 0
 1fc:	b0 e0       	ldi	r27, 0x00	; 0
 1fe:	8e 29       	or	r24, r14
 200:	9f 29       	or	r25, r15
 202:	a0 2b       	or	r26, r16
 204:	b1 2b       	or	r27, r17

id<<=8;
 206:	cc 24       	eor	r12, r12
 208:	d8 2e       	mov	r13, r24
 20a:	e9 2e       	mov	r14, r25
 20c:	fa 2e       	mov	r15, r26

RD_ACTIVE;
 20e:	40 98       	cbi	0x08, 0	; 8
 210:	9a e1       	ldi	r25, 0x1A	; 26
 212:	9a 95       	dec	r25
 214:	f1 f7       	brne	.-4      	; 0x212 <TFT9341_ReadReg+0x88>
 216:	00 c0       	rjmp	.+0      	; 0x218 <TFT9341_ReadReg+0x8e>

_delay_us(5);

 x=TFT9341_ReadByte();
 218:	0e 94 92 00 	call	0x124	; 0x124 <TFT9341_ReadByte>
 21c:	18 2f       	mov	r17, r24
 print_num(x);
 21e:	0e 94 65 00 	call	0xca	; 0xca <print_num>

RD_IDLE;
 222:	40 9a       	sbi	0x08, 0	; 8

id|=x;
 224:	81 2f       	mov	r24, r17
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	a0 e0       	ldi	r26, 0x00	; 0
 22a:	b0 e0       	ldi	r27, 0x00	; 0
 22c:	8c 29       	or	r24, r12
 22e:	9d 29       	or	r25, r13
 230:	ae 29       	or	r26, r14
 232:	bf 29       	or	r27, r15

id<<=8;
 234:	ee 24       	eor	r14, r14
 236:	f8 2e       	mov	r15, r24
 238:	09 2f       	mov	r16, r25
 23a:	1a 2f       	mov	r17, r26

RD_ACTIVE;
 23c:	40 98       	cbi	0x08, 0	; 8
 23e:	8a e1       	ldi	r24, 0x1A	; 26
 240:	8a 95       	dec	r24
 242:	f1 f7       	brne	.-4      	; 0x240 <TFT9341_ReadReg+0xb6>
 244:	00 c0       	rjmp	.+0      	; 0x246 <TFT9341_ReadReg+0xbc>

_delay_us(5);

 x=TFT9341_ReadByte();
 246:	0e 94 92 00 	call	0x124	; 0x124 <TFT9341_ReadByte>
 24a:	c8 2e       	mov	r12, r24
 print_num(x);
 24c:	0e 94 65 00 	call	0xca	; 0xca <print_num>

RD_IDLE;
 250:	40 9a       	sbi	0x08, 0	; 8

id|=x; 
 252:	2c 2d       	mov	r18, r12
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	40 e0       	ldi	r20, 0x00	; 0
 258:	50 e0       	ldi	r21, 0x00	; 0
 25a:	2e 29       	or	r18, r14
 25c:	3f 29       	or	r19, r15
 25e:	40 2b       	or	r20, r16
 260:	51 2b       	or	r21, r17

 if(r==0xEF)
 262:	9b 2d       	mov	r25, r11
 264:	9f 3e       	cpi	r25, 0xEF	; 239
 266:	b9 f4       	brne	.+46     	; 0x296 <TFT9341_ReadReg+0x10c>

{

  id<<=8;
 268:	ee 24       	eor	r14, r14
 26a:	f2 2e       	mov	r15, r18
 26c:	03 2f       	mov	r16, r19
 26e:	14 2f       	mov	r17, r20

  RD_ACTIVE;
 270:	40 98       	cbi	0x08, 0	; 8
 272:	8a e1       	ldi	r24, 0x1A	; 26
 274:	8a 95       	dec	r24
 276:	f1 f7       	brne	.-4      	; 0x274 <TFT9341_ReadReg+0xea>
 278:	00 c0       	rjmp	.+0      	; 0x27a <TFT9341_ReadReg+0xf0>

  _delay_us(5);

 x=TFT9341_ReadByte();
 27a:	0e 94 92 00 	call	0x124	; 0x124 <TFT9341_ReadByte>
 27e:	c8 2e       	mov	r12, r24
 print_num(x);
 280:	0e 94 65 00 	call	0xca	; 0xca <print_num>

  RD_IDLE;
 284:	40 9a       	sbi	0x08, 0	; 8

  id|=x;
 286:	2c 2d       	mov	r18, r12
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	50 e0       	ldi	r21, 0x00	; 0
 28e:	2e 29       	or	r18, r14
 290:	3f 29       	or	r19, r15
 292:	40 2b       	or	r20, r16
 294:	51 2b       	or	r21, r17

} 
 CS_IDLE;
 296:	43 9a       	sbi	0x08, 3	; 8

setWriteDir(); 
 298:	8a b1       	in	r24, 0x0a	; 10
 29a:	8c 6f       	ori	r24, 0xFC	; 252
 29c:	8a b9       	out	0x0a, r24	; 10
 29e:	84 b1       	in	r24, 0x04	; 4
 2a0:	83 60       	ori	r24, 0x03	; 3
 2a2:	84 b9       	out	0x04, r24	; 4
 2a4:	87 e5       	ldi	r24, 0x57	; 87
 2a6:	92 e0       	ldi	r25, 0x02	; 2
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <TFT9341_ReadReg+0x11e>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <TFT9341_ReadReg+0x124>
 2ae:	00 00       	nop
   _delay_us(150);//stabilization time

  return id; 

} 
 2b0:	b9 01       	movw	r22, r18
 2b2:	ca 01       	movw	r24, r20
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	ff 90       	pop	r15
 2ba:	ef 90       	pop	r14
 2bc:	df 90       	pop	r13
 2be:	cf 90       	pop	r12
 2c0:	bf 90       	pop	r11
 2c2:	08 95       	ret

000002c4 <TFT9341_SetRotation>:
unsigned int X_SIZE = 0;
unsigned int Y_SIZE = 0; 

 void TFT9341_SetRotation(unsigned char r)

{
 2c4:	1f 93       	push	r17
 2c6:	18 2f       	mov	r17, r24

  TFT9341_SendCommand(0x36);
 2c8:	86 e3       	ldi	r24, 0x36	; 54
 2ca:	0e 94 98 00 	call	0x130	; 0x130 <TFT9341_SendCommand>

  switch(r)
 2ce:	11 30       	cpi	r17, 0x01	; 1
 2d0:	49 f0       	breq	.+18     	; 0x2e4 <TFT9341_SetRotation+0x20>
 2d2:	11 30       	cpi	r17, 0x01	; 1
 2d4:	28 f0       	brcs	.+10     	; 0x2e0 <TFT9341_SetRotation+0x1c>
 2d6:	12 30       	cpi	r17, 0x02	; 2
 2d8:	39 f0       	breq	.+14     	; 0x2e8 <TFT9341_SetRotation+0x24>
 2da:	13 30       	cpi	r17, 0x03	; 3
 2dc:	01 f5       	brne	.+64     	; 0x31e <TFT9341_SetRotation+0x5a>
 2de:	10 c0       	rjmp	.+32     	; 0x300 <TFT9341_SetRotation+0x3c>

  {

 case 0:

TFT9341_SendData(0x48);
 2e0:	88 e4       	ldi	r24, 0x48	; 72
 2e2:	03 c0       	rjmp	.+6      	; 0x2ea <TFT9341_SetRotation+0x26>

break; 

 case 1:

TFT9341_SendData(0x28);
 2e4:	88 e2       	ldi	r24, 0x28	; 40
 2e6:	0d c0       	rjmp	.+26     	; 0x302 <TFT9341_SetRotation+0x3e>

 

case 2:

TFT9341_SendData(0x88);
 2e8:	88 e8       	ldi	r24, 0x88	; 136
 2ea:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

X_SIZE = 240;
 2ee:	80 ef       	ldi	r24, 0xF0	; 240
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	90 93 05 01 	sts	0x0105, r25
 2f6:	80 93 04 01 	sts	0x0104, r24

Y_SIZE = 320;
 2fa:	80 e4       	ldi	r24, 0x40	; 64
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	0b c0       	rjmp	.+22     	; 0x316 <TFT9341_SetRotation+0x52>
 


case 3:

TFT9341_SendData(0xE8);
 300:	88 ee       	ldi	r24, 0xE8	; 232
 302:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

X_SIZE = 320;
 306:	80 e4       	ldi	r24, 0x40	; 64
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	90 93 05 01 	sts	0x0105, r25
 30e:	80 93 04 01 	sts	0x0104, r24

Y_SIZE = 240;
 312:	80 ef       	ldi	r24, 0xF0	; 240
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	90 93 07 01 	sts	0x0107, r25
 31a:	80 93 06 01 	sts	0x0106, r24

break; 

} 
}
 31e:	1f 91       	pop	r17
 320:	08 95       	ret

00000322 <TFT9341_ini>:

void TFT9341_ini(void)

{

  port_ini(); 
 322:	0e 94 48 00 	call	0x90	; 0x90 <port_ini>
  TFT9341_reset();
 326:	0e 94 aa 00 	call	0x154	; 0x154 <TFT9341_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32a:	8f ef       	ldi	r24, 0xFF	; 255
 32c:	93 ed       	ldi	r25, 0xD3	; 211
 32e:	a0 e3       	ldi	r26, 0x30	; 48
 330:	81 50       	subi	r24, 0x01	; 1
 332:	90 40       	sbci	r25, 0x00	; 0
 334:	a0 40       	sbci	r26, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <TFT9341_ini+0xe>
 338:	00 c0       	rjmp	.+0      	; 0x33a <TFT9341_ini+0x18>
 33a:	00 00       	nop
  _delay_ms(1000); 
  dtt=TFT9341_ReadReg(0xD3); 
 33c:	83 ed       	ldi	r24, 0xD3	; 211
 33e:	0e 94 c5 00 	call	0x18a	; 0x18a <TFT9341_ReadReg>
 342:	60 93 00 01 	sts	0x0100, r22
 346:	70 93 01 01 	sts	0x0101, r23
 34a:	80 93 02 01 	sts	0x0102, r24
 34e:	90 93 03 01 	sts	0x0103, r25
TFT9341_SendCommand(0x01);//Software Reset
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 98 00 	call	0x130	; 0x130 <TFT9341_SendCommand>

TFT9341_SendCommand(0xCB);//Power Control A
 358:	8b ec       	ldi	r24, 0xCB	; 203
 35a:	0e 94 98 00 	call	0x130	; 0x130 <TFT9341_SendCommand>

TFT9341_SendData(0x39);
 35e:	89 e3       	ldi	r24, 0x39	; 57
 360:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x2C);
 364:	8c e2       	ldi	r24, 0x2C	; 44
 366:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x00);
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x34);
 370:	84 e3       	ldi	r24, 0x34	; 52
 372:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x02); 
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>
 TFT9341_SendCommand(0xCF);//Power Control B
 37c:	8f ec       	ldi	r24, 0xCF	; 207
 37e:	0e 94 98 00 	call	0x130	; 0x130 <TFT9341_SendCommand>

TFT9341_SendData(0x00);
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0xC1);
 388:	81 ec       	ldi	r24, 0xC1	; 193
 38a:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x30); 
 38e:	80 e3       	ldi	r24, 0x30	; 48
 390:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>
 TFT9341_SendCommand(0xE8);//Driver timing control A
 394:	88 ee       	ldi	r24, 0xE8	; 232
 396:	0e 94 98 00 	call	0x130	; 0x130 <TFT9341_SendCommand>

TFT9341_SendData(0x85);
 39a:	85 e8       	ldi	r24, 0x85	; 133
 39c:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x00);
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x78);
 3a6:	88 e7       	ldi	r24, 0x78	; 120
 3a8:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendCommand(0xEA);//Driver timing control B
 3ac:	8a ee       	ldi	r24, 0xEA	; 234
 3ae:	0e 94 98 00 	call	0x130	; 0x130 <TFT9341_SendCommand>

TFT9341_SendData(0x00);
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x00); 
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>
 TFT9341_SendCommand(0xED);//Power on Sequence control
 3be:	8d ee       	ldi	r24, 0xED	; 237
 3c0:	0e 94 98 00 	call	0x130	; 0x130 <TFT9341_SendCommand>

TFT9341_SendData(0x64);
 3c4:	84 e6       	ldi	r24, 0x64	; 100
 3c6:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x03);
 3ca:	83 e0       	ldi	r24, 0x03	; 3
 3cc:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x12);
 3d0:	82 e1       	ldi	r24, 0x12	; 18
 3d2:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x81);
 3d6:	81 e8       	ldi	r24, 0x81	; 129
 3d8:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendCommand(0xF7);//Pump ratio control
 3dc:	87 ef       	ldi	r24, 0xF7	; 247
 3de:	0e 94 98 00 	call	0x130	; 0x130 <TFT9341_SendCommand>

TFT9341_SendData(0x20);
 3e2:	80 e2       	ldi	r24, 0x20	; 32
 3e4:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendCommand(0xC0);//Power Control 1
 3e8:	80 ec       	ldi	r24, 0xC0	; 192
 3ea:	0e 94 98 00 	call	0x130	; 0x130 <TFT9341_SendCommand>

TFT9341_SendData(0x10);
 3ee:	80 e1       	ldi	r24, 0x10	; 16
 3f0:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendCommand(0xC1);//Power Control 2
 3f4:	81 ec       	ldi	r24, 0xC1	; 193
 3f6:	0e 94 98 00 	call	0x130	; 0x130 <TFT9341_SendCommand>

TFT9341_SendData(0x10);
 3fa:	80 e1       	ldi	r24, 0x10	; 16
 3fc:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendCommand(0xC5);//VCOM Control 1
 400:	85 ec       	ldi	r24, 0xC5	; 197
 402:	0e 94 98 00 	call	0x130	; 0x130 <TFT9341_SendCommand>

TFT9341_SendData(0x3E);
 406:	8e e3       	ldi	r24, 0x3E	; 62
 408:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x28);
 40c:	88 e2       	ldi	r24, 0x28	; 40
 40e:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendCommand(0xC7);//VCOM Control 2
 412:	87 ec       	ldi	r24, 0xC7	; 199
 414:	0e 94 98 00 	call	0x130	; 0x130 <TFT9341_SendCommand>

TFT9341_SendData(0x86);
 418:	86 e8       	ldi	r24, 0x86	; 134
 41a:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SetRotation(0);
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	0e 94 62 01 	call	0x2c4	; 0x2c4 <TFT9341_SetRotation>

TFT9341_SendCommand(0x3A);//Pixel Format Set
 424:	8a e3       	ldi	r24, 0x3A	; 58
 426:	0e 94 98 00 	call	0x130	; 0x130 <TFT9341_SendCommand>

TFT9341_SendData(0x55);//16bit
 42a:	85 e5       	ldi	r24, 0x55	; 85
 42c:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendCommand(0xB1);
 430:	81 eb       	ldi	r24, 0xB1	; 177
 432:	0e 94 98 00 	call	0x130	; 0x130 <TFT9341_SendCommand>

TFT9341_SendData(0x00);
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x18);// Частота кадров 79 Гц
 43c:	88 e1       	ldi	r24, 0x18	; 24
 43e:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendCommand(0xB6);//Display Function Control
 442:	86 eb       	ldi	r24, 0xB6	; 182
 444:	0e 94 98 00 	call	0x130	; 0x130 <TFT9341_SendCommand>

TFT9341_SendData(0x08);
 448:	88 e0       	ldi	r24, 0x08	; 8
 44a:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x82);
 44e:	82 e8       	ldi	r24, 0x82	; 130
 450:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x27);//320 строк
 454:	87 e2       	ldi	r24, 0x27	; 39
 456:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendCommand(0xF2);//Enable 3G (пока не знаю что это за режим)
 45a:	82 ef       	ldi	r24, 0xF2	; 242
 45c:	0e 94 98 00 	call	0x130	; 0x130 <TFT9341_SendCommand>

TFT9341_SendData(0x00);//не включаем
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendCommand(0x26);//Gamma set
 466:	86 e2       	ldi	r24, 0x26	; 38
 468:	0e 94 98 00 	call	0x130	; 0x130 <TFT9341_SendCommand>

TFT9341_SendData(0x01);//Gamma Curve (G2.2) (Кривая цветовой гаммы)
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendCommand(0xE0);//Positive Gamma Correction
 472:	80 ee       	ldi	r24, 0xE0	; 224
 474:	0e 94 98 00 	call	0x130	; 0x130 <TFT9341_SendCommand>

TFT9341_SendData(0x0F);
 478:	8f e0       	ldi	r24, 0x0F	; 15
 47a:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x31);
 47e:	81 e3       	ldi	r24, 0x31	; 49
 480:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x2B);
 484:	8b e2       	ldi	r24, 0x2B	; 43
 486:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x0C);
 48a:	8c e0       	ldi	r24, 0x0C	; 12
 48c:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x0E);
 490:	8e e0       	ldi	r24, 0x0E	; 14
 492:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x08);
 496:	88 e0       	ldi	r24, 0x08	; 8
 498:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x4E);
 49c:	8e e4       	ldi	r24, 0x4E	; 78
 49e:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0xF1);
 4a2:	81 ef       	ldi	r24, 0xF1	; 241
 4a4:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x37);
 4a8:	87 e3       	ldi	r24, 0x37	; 55
 4aa:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x07);
 4ae:	87 e0       	ldi	r24, 0x07	; 7
 4b0:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x10);
 4b4:	80 e1       	ldi	r24, 0x10	; 16
 4b6:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x03);
 4ba:	83 e0       	ldi	r24, 0x03	; 3
 4bc:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x0E);
 4c0:	8e e0       	ldi	r24, 0x0E	; 14
 4c2:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x09);
 4c6:	89 e0       	ldi	r24, 0x09	; 9
 4c8:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x00);
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendCommand(0xE1);//Negative Gamma Correction
 4d2:	81 ee       	ldi	r24, 0xE1	; 225
 4d4:	0e 94 98 00 	call	0x130	; 0x130 <TFT9341_SendCommand>

TFT9341_SendData(0x00);
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x0E);
 4de:	8e e0       	ldi	r24, 0x0E	; 14
 4e0:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x14);
 4e4:	84 e1       	ldi	r24, 0x14	; 20
 4e6:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x03);
 4ea:	83 e0       	ldi	r24, 0x03	; 3
 4ec:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x11);
 4f0:	81 e1       	ldi	r24, 0x11	; 17
 4f2:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x07);
 4f6:	87 e0       	ldi	r24, 0x07	; 7
 4f8:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x31);
 4fc:	81 e3       	ldi	r24, 0x31	; 49
 4fe:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0xC1);
 502:	81 ec       	ldi	r24, 0xC1	; 193
 504:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x48);
 508:	88 e4       	ldi	r24, 0x48	; 72
 50a:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x08);
 50e:	88 e0       	ldi	r24, 0x08	; 8
 510:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x0F);
 514:	8f e0       	ldi	r24, 0x0F	; 15
 516:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x0C);
 51a:	8c e0       	ldi	r24, 0x0C	; 12
 51c:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x31);
 520:	81 e3       	ldi	r24, 0x31	; 49
 522:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x36);
 526:	86 e3       	ldi	r24, 0x36	; 54
 528:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

TFT9341_SendData(0x0F); 
 52c:	8f e0       	ldi	r24, 0x0F	; 15
 52e:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>


TFT9341_SendCommand(0x11);//Выйдем из спящего режим
 532:	81 e1       	ldi	r24, 0x11	; 17
 534:	0e 94 98 00 	call	0x130	; 0x130 <TFT9341_SendCommand>
 538:	8f ef       	ldi	r24, 0xFF	; 255
 53a:	92 e5       	ldi	r25, 0x52	; 82
 53c:	a7 e0       	ldi	r26, 0x07	; 7
 53e:	81 50       	subi	r24, 0x01	; 1
 540:	90 40       	sbci	r25, 0x00	; 0
 542:	a0 40       	sbci	r26, 0x00	; 0
 544:	e1 f7       	brne	.-8      	; 0x53e <TFT9341_ini+0x21c>
 546:	00 c0       	rjmp	.+0      	; 0x548 <TFT9341_ini+0x226>
 548:	00 00       	nop

  _delay_ms(150);


  TFT9341_SendCommand(0x29);//Включение дисплея
 54a:	89 e2       	ldi	r24, 0x29	; 41
 54c:	0e 94 98 00 	call	0x130	; 0x130 <TFT9341_SendCommand>

  TFT9341_SendData(0x2C);
 550:	8c e2       	ldi	r24, 0x2C	; 44
 552:	0e 94 a1 00 	call	0x142	; 0x142 <TFT9341_SendData>

 CS_ACTIVE;//выбор дисплея
 556:	43 98       	cbi	0x08, 3	; 8
 CD_COMMAND;//лапка в состоянии посылки команды
 558:	42 98       	cbi	0x08, 2	; 8
 TFT9341_Write8(0x29); 
 55a:	89 e2       	ldi	r24, 0x29	; 41
 55c:	0e 94 c0 00 	call	0x180	; 0x180 <TFT9341_Write8>
 CD_DATA;
 560:	42 9a       	sbi	0x08, 2	; 8
 TFT9341_Write8(0x2C);
 562:	8c e2       	ldi	r24, 0x2C	; 44
 564:	0e 94 c0 00 	call	0x180	; 0x180 <TFT9341_Write8>
 CS_IDLE;
 568:	43 9a       	sbi	0x08, 3	; 8
 56a:	8f ef       	ldi	r24, 0xFF	; 255
 56c:	92 e5       	ldi	r25, 0x52	; 82
 56e:	a7 e0       	ldi	r26, 0x07	; 7
 570:	81 50       	subi	r24, 0x01	; 1
 572:	90 40       	sbci	r25, 0x00	; 0
 574:	a0 40       	sbci	r26, 0x00	; 0
 576:	e1 f7       	brne	.-8      	; 0x570 <TFT9341_ini+0x24e>
 578:	00 c0       	rjmp	.+0      	; 0x57a <TFT9341_ini+0x258>
 57a:	00 00       	nop
  _delay_ms(150); 
}
 57c:	08 95       	ret

0000057e <TFT9341_Flood>:

void TFT9341_Flood(unsigned short color, unsigned long len)

{
 57e:	bf 92       	push	r11
 580:	cf 92       	push	r12
 582:	df 92       	push	r13
 584:	ef 92       	push	r14
 586:	ff 92       	push	r15
 588:	0f 93       	push	r16
 58a:	1f 93       	push	r17
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	d8 2e       	mov	r13, r24
 592:	c9 2e       	mov	r12, r25
 594:	7a 01       	movw	r14, r20
 596:	8b 01       	movw	r16, r22

  unsigned short blocks;

  unsigned char i, hi = color>>8, lo=color; 
 CS_ACTIVE;
 598:	43 98       	cbi	0x08, 3	; 8

CD_COMMAND; 
 59a:	42 98       	cbi	0x08, 2	; 8
 TFT9341_Write8(0x2C);
 59c:	8c e2       	ldi	r24, 0x2C	; 44
 59e:	0e 94 c0 00 	call	0x180	; 0x180 <TFT9341_Write8>

CD_DATA;
 5a2:	42 9a       	sbi	0x08, 2	; 8

TFT9341_Write8(hi);
 5a4:	8c 2d       	mov	r24, r12
 5a6:	0e 94 c0 00 	call	0x180	; 0x180 <TFT9341_Write8>

TFT9341_Write8(lo); 
 5aa:	8d 2d       	mov	r24, r13
 5ac:	0e 94 c0 00 	call	0x180	; 0x180 <TFT9341_Write8>

 len--;
 5b0:	08 94       	sec
 5b2:	e1 08       	sbc	r14, r1
 5b4:	f1 08       	sbc	r15, r1
 5b6:	01 09       	sbc	r16, r1
 5b8:	11 09       	sbc	r17, r1

blocks=(unsigned short)(len/64);//64 pixels/block 
 5ba:	d8 01       	movw	r26, r16
 5bc:	c7 01       	movw	r24, r14
 5be:	66 e0       	ldi	r22, 0x06	; 6
 5c0:	b6 95       	lsr	r27
 5c2:	a7 95       	ror	r26
 5c4:	97 95       	ror	r25
 5c6:	87 95       	ror	r24
 5c8:	6a 95       	dec	r22
 5ca:	d1 f7       	brne	.-12     	; 0x5c0 <TFT9341_Flood+0x42>
 5cc:	ec 01       	movw	r28, r24

if (hi==lo)
 5ce:	cd 14       	cp	r12, r13
 5d0:	09 f0       	breq	.+2      	; 0x5d4 <TFT9341_Flood+0x56>
 5d2:	3f c0       	rjmp	.+126    	; 0x652 <TFT9341_Flood+0xd4>
 5d4:	14 c0       	rjmp	.+40     	; 0x5fe <TFT9341_Flood+0x80>

{ //if

 while(blocks--)
 5d6:	80 e1       	ldi	r24, 0x10	; 16

  do

  {

    WR_STROBE;WR_STROBE;WR_STROBE;WR_STROBE;//2bytes/pixel
 5d8:	41 98       	cbi	0x08, 1	; 8
 5da:	41 9a       	sbi	0x08, 1	; 8
 5dc:	41 98       	cbi	0x08, 1	; 8
 5de:	41 9a       	sbi	0x08, 1	; 8
 5e0:	41 98       	cbi	0x08, 1	; 8
 5e2:	41 9a       	sbi	0x08, 1	; 8
 5e4:	41 98       	cbi	0x08, 1	; 8
 5e6:	41 9a       	sbi	0x08, 1	; 8

    WR_STROBE;WR_STROBE;WR_STROBE;WR_STROBE;//x4 pixel
 5e8:	41 98       	cbi	0x08, 1	; 8
 5ea:	41 9a       	sbi	0x08, 1	; 8
 5ec:	41 98       	cbi	0x08, 1	; 8
 5ee:	41 9a       	sbi	0x08, 1	; 8
 5f0:	41 98       	cbi	0x08, 1	; 8
 5f2:	41 9a       	sbi	0x08, 1	; 8
 5f4:	41 98       	cbi	0x08, 1	; 8
 5f6:	41 9a       	sbi	0x08, 1	; 8

  } while (--i);
 5f8:	81 50       	subi	r24, 0x01	; 1
 5fa:	71 f7       	brne	.-36     	; 0x5d8 <TFT9341_Flood+0x5a>
 5fc:	21 97       	sbiw	r28, 0x01	; 1

if (hi==lo)

{ //if

 while(blocks--)
 5fe:	20 97       	sbiw	r28, 0x00	; 0
 600:	51 f7       	brne	.-44     	; 0x5d6 <TFT9341_Flood+0x58>

} //while

//Fill any remaining pixels(1 to 64)

  for (i=(unsigned char)len&63;i--;)
 602:	8e 2d       	mov	r24, r14
 604:	8f 73       	andi	r24, 0x3F	; 63
 606:	05 c0       	rjmp	.+10     	; 0x612 <TFT9341_Flood+0x94>

  {

    WR_STROBE;
 608:	41 98       	cbi	0x08, 1	; 8
 60a:	41 9a       	sbi	0x08, 1	; 8

    WR_STROBE;
 60c:	41 98       	cbi	0x08, 1	; 8
 60e:	41 9a       	sbi	0x08, 1	; 8
 610:	81 50       	subi	r24, 0x01	; 1

} //while

//Fill any remaining pixels(1 to 64)

  for (i=(unsigned char)len&63;i--;)
 612:	88 23       	and	r24, r24
 614:	c9 f7       	brne	.-14     	; 0x608 <TFT9341_Flood+0x8a>
 616:	2b c0       	rjmp	.+86     	; 0x66e <TFT9341_Flood+0xf0>

else

{ //if

 while(blocks--)
 618:	50 e1       	ldi	r21, 0x10	; 16
 61a:	b5 2e       	mov	r11, r21

  do

  {

   TFT9341_Write8(hi);TFT9341_Write8(lo);TFT9341_Write8(hi);TFT9341_Write8(lo);
 61c:	8c 2d       	mov	r24, r12
 61e:	0e 94 c0 00 	call	0x180	; 0x180 <TFT9341_Write8>
 622:	8d 2d       	mov	r24, r13
 624:	0e 94 c0 00 	call	0x180	; 0x180 <TFT9341_Write8>
 628:	8c 2d       	mov	r24, r12
 62a:	0e 94 c0 00 	call	0x180	; 0x180 <TFT9341_Write8>
 62e:	8d 2d       	mov	r24, r13
 630:	0e 94 c0 00 	call	0x180	; 0x180 <TFT9341_Write8>

    TFT9341_Write8(hi);TFT9341_Write8(lo);TFT9341_Write8(hi);TFT9341_Write8(lo); 
 634:	8c 2d       	mov	r24, r12
 636:	0e 94 c0 00 	call	0x180	; 0x180 <TFT9341_Write8>
 63a:	8d 2d       	mov	r24, r13
 63c:	0e 94 c0 00 	call	0x180	; 0x180 <TFT9341_Write8>
 640:	8c 2d       	mov	r24, r12
 642:	0e 94 c0 00 	call	0x180	; 0x180 <TFT9341_Write8>
 646:	8d 2d       	mov	r24, r13
 648:	0e 94 c0 00 	call	0x180	; 0x180 <TFT9341_Write8>

  } while (--i);
 64c:	ba 94       	dec	r11
 64e:	31 f7       	brne	.-52     	; 0x61c <TFT9341_Flood+0x9e>
 650:	21 97       	sbiw	r28, 0x01	; 1

else

{ //if

 while(blocks--)
 652:	20 97       	sbiw	r28, 0x00	; 0
 654:	09 f7       	brne	.-62     	; 0x618 <TFT9341_Flood+0x9a>

} //while

 //Fill any remaining pixels(1 to 64)

  for (i=(unsigned char)len&63;i--;)
 656:	8f e3       	ldi	r24, 0x3F	; 63
 658:	e8 22       	and	r14, r24
 65a:	07 c0       	rjmp	.+14     	; 0x66a <TFT9341_Flood+0xec>

  {

    TFT9341_Write8(hi);
 65c:	8c 2d       	mov	r24, r12
 65e:	0e 94 c0 00 	call	0x180	; 0x180 <TFT9341_Write8>

    TFT9341_Write8(lo);
 662:	8d 2d       	mov	r24, r13
 664:	0e 94 c0 00 	call	0x180	; 0x180 <TFT9341_Write8>
 668:	ea 94       	dec	r14

} //while

 //Fill any remaining pixels(1 to 64)

  for (i=(unsigned char)len&63;i--;)
 66a:	ee 20       	and	r14, r14
 66c:	b9 f7       	brne	.-18     	; 0x65c <TFT9341_Flood+0xde>
  }

} //if


CS_IDLE;
 66e:	43 9a       	sbi	0x08, 3	; 8

} 
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	1f 91       	pop	r17
 676:	0f 91       	pop	r16
 678:	ff 90       	pop	r15
 67a:	ef 90       	pop	r14
 67c:	df 90       	pop	r13
 67e:	cf 90       	pop	r12
 680:	bf 90       	pop	r11
 682:	08 95       	ret

00000684 <TFT9341_WriteRegister32>:

 //—————————————————————

void TFT9341_WriteRegister32(unsigned char r, unsigned long d)

{
 684:	df 93       	push	r29
 686:	cf 93       	push	r28
 688:	00 d0       	rcall	.+0      	; 0x68a <TFT9341_WriteRegister32+0x6>
 68a:	00 d0       	rcall	.+0      	; 0x68c <TFT9341_WriteRegister32+0x8>
 68c:	cd b7       	in	r28, 0x3d	; 61
 68e:	de b7       	in	r29, 0x3e	; 62

  CS_ACTIVE;
 690:	43 98       	cbi	0x08, 3	; 8

  CD_COMMAND;
 692:	42 98       	cbi	0x08, 2	; 8

  TFT9341_Write8(r);
 694:	4c 83       	std	Y+4, r20	; 0x04
 696:	5b 83       	std	Y+3, r21	; 0x03
 698:	6a 83       	std	Y+2, r22	; 0x02
 69a:	79 83       	std	Y+1, r23	; 0x01
 69c:	0e 94 c0 00 	call	0x180	; 0x180 <TFT9341_Write8>

  CD_DATA;
 6a0:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6a2:	85 e0       	ldi	r24, 0x05	; 5
 6a4:	8a 95       	dec	r24
 6a6:	f1 f7       	brne	.-4      	; 0x6a4 <TFT9341_WriteRegister32+0x20>
 6a8:	00 00       	nop

  _delay_us(1);

  TFT9341_Write8(d>>24);
 6aa:	79 81       	ldd	r23, Y+1	; 0x01
 6ac:	87 2f       	mov	r24, r23
 6ae:	0e 94 c0 00 	call	0x180	; 0x180 <TFT9341_Write8>
 6b2:	e5 e0       	ldi	r30, 0x05	; 5
 6b4:	ea 95       	dec	r30
 6b6:	f1 f7       	brne	.-4      	; 0x6b4 <TFT9341_WriteRegister32+0x30>
 6b8:	00 00       	nop

  _delay_us(1);

  TFT9341_Write8(d>>16);
 6ba:	6a 81       	ldd	r22, Y+2	; 0x02
 6bc:	86 2f       	mov	r24, r22
 6be:	0e 94 c0 00 	call	0x180	; 0x180 <TFT9341_Write8>
 6c2:	f5 e0       	ldi	r31, 0x05	; 5
 6c4:	fa 95       	dec	r31
 6c6:	f1 f7       	brne	.-4      	; 0x6c4 <TFT9341_WriteRegister32+0x40>
 6c8:	00 00       	nop

  _delay_us(1);

  TFT9341_Write8(d>>8);
 6ca:	5b 81       	ldd	r21, Y+3	; 0x03
 6cc:	85 2f       	mov	r24, r21
 6ce:	0e 94 c0 00 	call	0x180	; 0x180 <TFT9341_Write8>
 6d2:	85 e0       	ldi	r24, 0x05	; 5
 6d4:	8a 95       	dec	r24
 6d6:	f1 f7       	brne	.-4      	; 0x6d4 <TFT9341_WriteRegister32+0x50>
 6d8:	00 00       	nop

  _delay_us(1);

  TFT9341_Write8(d);
 6da:	4c 81       	ldd	r20, Y+4	; 0x04
 6dc:	84 2f       	mov	r24, r20
 6de:	0e 94 c0 00 	call	0x180	; 0x180 <TFT9341_Write8>

  CS_IDLE;
 6e2:	43 9a       	sbi	0x08, 3	; 8

}
 6e4:	0f 90       	pop	r0
 6e6:	0f 90       	pop	r0
 6e8:	0f 90       	pop	r0
 6ea:	0f 90       	pop	r0
 6ec:	cf 91       	pop	r28
 6ee:	df 91       	pop	r29
 6f0:	08 95       	ret

000006f2 <TFT9341_SetAddrWindow>:

 //—————————————————————

void TFT9341_SetAddrWindow(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2)

{
 6f2:	0f 93       	push	r16
 6f4:	1f 93       	push	r17
 6f6:	cf 93       	push	r28
 6f8:	df 93       	push	r29
 6fa:	8b 01       	movw	r16, r22
 6fc:	e9 01       	movw	r28, r18

  unsigned long t;

  CS_ACTIVE;
 6fe:	43 98       	cbi	0x08, 3	; 8

  t = x1;
 700:	a0 e0       	ldi	r26, 0x00	; 0
 702:	b0 e0       	ldi	r27, 0x00	; 0

  t<<=16;
 704:	dc 01       	movw	r26, r24
 706:	99 27       	eor	r25, r25
 708:	88 27       	eor	r24, r24

  t |= x2;
 70a:	60 e0       	ldi	r22, 0x00	; 0
 70c:	70 e0       	ldi	r23, 0x00	; 0
 70e:	48 2b       	or	r20, r24
 710:	59 2b       	or	r21, r25
 712:	6a 2b       	or	r22, r26
 714:	7b 2b       	or	r23, r27

  TFT9341_WriteRegister32(0x2A,t);//Column Addres Set
 716:	8a e2       	ldi	r24, 0x2A	; 42
 718:	0e 94 42 03 	call	0x684	; 0x684 <TFT9341_WriteRegister32>

  t = y1;
 71c:	20 e0       	ldi	r18, 0x00	; 0
 71e:	30 e0       	ldi	r19, 0x00	; 0

  t<<=16;
 720:	98 01       	movw	r18, r16
 722:	11 27       	eor	r17, r17
 724:	00 27       	eor	r16, r16

  t |= y2;
 726:	ae 01       	movw	r20, r28
 728:	60 e0       	ldi	r22, 0x00	; 0
 72a:	70 e0       	ldi	r23, 0x00	; 0
 72c:	40 2b       	or	r20, r16
 72e:	51 2b       	or	r21, r17
 730:	62 2b       	or	r22, r18
 732:	73 2b       	or	r23, r19

  TFT9341_WriteRegister32(0x2B,t);//Page Addres Set
 734:	8b e2       	ldi	r24, 0x2B	; 43
 736:	0e 94 42 03 	call	0x684	; 0x684 <TFT9341_WriteRegister32>

  CS_IDLE;
 73a:	43 9a       	sbi	0x08, 3	; 8

}
 73c:	df 91       	pop	r29
 73e:	cf 91       	pop	r28
 740:	1f 91       	pop	r17
 742:	0f 91       	pop	r16
 744:	08 95       	ret

00000746 <TFT9341_FillScreen>:

 //—————————————————————

void TFT9341_FillScreen(unsigned int color)

{
 746:	cf 93       	push	r28
 748:	df 93       	push	r29
 74a:	ec 01       	movw	r28, r24

  TFT9341_SetAddrWindow(0,0,X_SIZE-1,Y_SIZE-1);
 74c:	40 91 04 01 	lds	r20, 0x0104
 750:	50 91 05 01 	lds	r21, 0x0105
 754:	41 50       	subi	r20, 0x01	; 1
 756:	50 40       	sbci	r21, 0x00	; 0
 758:	20 91 06 01 	lds	r18, 0x0106
 75c:	30 91 07 01 	lds	r19, 0x0107
 760:	21 50       	subi	r18, 0x01	; 1
 762:	30 40       	sbci	r19, 0x00	; 0
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	70 e0       	ldi	r23, 0x00	; 0
 76c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TFT9341_SetAddrWindow>

  TFT9341_Flood(color,(long)X_SIZE*(long)Y_SIZE);
 770:	60 91 06 01 	lds	r22, 0x0106
 774:	70 91 07 01 	lds	r23, 0x0107
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	20 91 04 01 	lds	r18, 0x0104
 780:	30 91 05 01 	lds	r19, 0x0105
 784:	40 e0       	ldi	r20, 0x00	; 0
 786:	50 e0       	ldi	r21, 0x00	; 0
 788:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__mulsi3>
 78c:	ab 01       	movw	r20, r22
 78e:	bc 01       	movw	r22, r24
 790:	ce 01       	movw	r24, r28
 792:	0e 94 bf 02 	call	0x57e	; 0x57e <TFT9341_Flood>

}
 796:	df 91       	pop	r29
 798:	cf 91       	pop	r28
 79a:	08 95       	ret

0000079c <main>:

//————————————————————— 

int main(void)
{
	uart_init();
 79c:	0e 94 50 00 	call	0xa0	; 0xa0 <uart_init>
	TFT9341_ini();
 7a0:	0e 94 91 01 	call	0x322	; 0x322 <TFT9341_ini>
//	uart_send('A');
//	while(1) ;
	
	TFT9341_FillScreen(BLACK);
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	0e 94 a3 03 	call	0x746	; 0x746 <TFT9341_FillScreen>

	return 0;
}
 7ac:	80 e0       	ldi	r24, 0x00	; 0
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	08 95       	ret

000007b2 <__mulsi3>:
 7b2:	62 9f       	mul	r22, r18
 7b4:	d0 01       	movw	r26, r0
 7b6:	73 9f       	mul	r23, r19
 7b8:	f0 01       	movw	r30, r0
 7ba:	82 9f       	mul	r24, r18
 7bc:	e0 0d       	add	r30, r0
 7be:	f1 1d       	adc	r31, r1
 7c0:	64 9f       	mul	r22, r20
 7c2:	e0 0d       	add	r30, r0
 7c4:	f1 1d       	adc	r31, r1
 7c6:	92 9f       	mul	r25, r18
 7c8:	f0 0d       	add	r31, r0
 7ca:	83 9f       	mul	r24, r19
 7cc:	f0 0d       	add	r31, r0
 7ce:	74 9f       	mul	r23, r20
 7d0:	f0 0d       	add	r31, r0
 7d2:	65 9f       	mul	r22, r21
 7d4:	f0 0d       	add	r31, r0
 7d6:	99 27       	eor	r25, r25
 7d8:	72 9f       	mul	r23, r18
 7da:	b0 0d       	add	r27, r0
 7dc:	e1 1d       	adc	r30, r1
 7de:	f9 1f       	adc	r31, r25
 7e0:	63 9f       	mul	r22, r19
 7e2:	b0 0d       	add	r27, r0
 7e4:	e1 1d       	adc	r30, r1
 7e6:	f9 1f       	adc	r31, r25
 7e8:	bd 01       	movw	r22, r26
 7ea:	cf 01       	movw	r24, r30
 7ec:	11 24       	eor	r1, r1
 7ee:	08 95       	ret

000007f0 <__udivmodqi4>:
 7f0:	99 1b       	sub	r25, r25
 7f2:	79 e0       	ldi	r23, 0x09	; 9
 7f4:	04 c0       	rjmp	.+8      	; 0x7fe <__udivmodqi4_ep>

000007f6 <__udivmodqi4_loop>:
 7f6:	99 1f       	adc	r25, r25
 7f8:	96 17       	cp	r25, r22
 7fa:	08 f0       	brcs	.+2      	; 0x7fe <__udivmodqi4_ep>
 7fc:	96 1b       	sub	r25, r22

000007fe <__udivmodqi4_ep>:
 7fe:	88 1f       	adc	r24, r24
 800:	7a 95       	dec	r23
 802:	c9 f7       	brne	.-14     	; 0x7f6 <__udivmodqi4_loop>
 804:	80 95       	com	r24
 806:	08 95       	ret

00000808 <_exit>:
 808:	f8 94       	cli

0000080a <__stop_program>:
 80a:	ff cf       	rjmp	.-2      	; 0x80a <__stop_program>
